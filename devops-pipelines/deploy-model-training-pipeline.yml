# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: deploy-model-training-pipeline
trigger: none
variables: #To be updated 
  - ${{ if eq(variables['Build.SourceBranchName'], 'feature/lucas') }}:
      - template: ../config-infra-dev.yml
      - group: DevVars
  - ${{ if ne(variables['Build.SourceBranchName'], 'prod') }}:
      - template: ../config-infra-prod.yml
      - group: ProdVars


pool:
  name: vmss-prd-windows-2022
  vmImage: windows-latest
 


stages:
  - stage: DeployTrainingPipeline
    displayName: Deploy Training Pipeline
    jobs:
      - job: DeployTrainingPipeline
        timeoutInMinutes: 120
        steps:
          # 1. checkout your repo
          - checkout: self
    
                
          # 2. Install Azure ML extension
          - task: AzureCLI@2
            displayName: 'Install Azure ML Extension'
            inputs:
              azureSubscription: $(ado_service_connection_aml_ws)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Installing Azure ML CLI extension... $(ado_service_connection_aml_ws)"
                az extension add --name ml --yes
                az extension list

          # 3. authenticate & “attach” the AML workspace
          - task: AzureCLI@2
            displayName: 'Configure AML workspace'
            inputs:
              azureSubscription: $(ado_service_connection_aml_ws)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Configuring AML workspace: $(aml_workspace) in resource group: $(resource_group)"
                $subscription_id = az account show --query id -o tsv
                Write-Host "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$subscription_id"
                Write-Host "##vso[task.setvariable variable=AZURE_RESOURCE_GROUP]$(resource_group)"
                Write-Host "##vso[task.setvariable variable=AZURE_ML_WORKSPACE]$(aml_workspace)"
                Write-Host "Azure ML environment variables set"

          #4. create or validate compute
          - task: AzureCLI@2
            displayName: 'Ensure AML compute cluster'
            inputs:
              azureSubscription: $(ado_service_connection_aml_ws)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Checking for compute cluster 'cpu-cluster2'..."
                $exists = $false
                try {
                  if (az ml compute show --name cpu-cluster2 --resource-group "$(resource_group)" --workspace-name "$(aml_workspace)" 2>$null) {
                    Write-Host "Compute cluster exists"
                    $exists = $true
                  }
                } catch { }
                if (-not $exists) {
                  Write-Host "Creating compute cluster 'cpu-cluster2'..."
                  # Create train job compute cluster
                  az ml compute create --file train/compute.yml --resource-group "$(resource_group)" --workspace-name "$(aml_workspace)"
                }
              workingDirectory: 'ml-pipelines/cli'

          # 5. register your conda environment
          - task: AzureCLI@2
            displayName: 'Register (or bump) training environment'
            inputs:
              azureSubscription: $(ado_service_connection_aml_ws)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Registering (or bumping) environment 'taxi-train-env'..."
                az ml environment create --file train/environment.yml --resource-group "$(resource_group)" --workspace-name "$(aml_workspace)"
                    
                Write-Host "Environment registered/bumped to latest version."
              workingDirectory: 'ml-pipelines/cli'
                
          # 6. register the CSV as a Data Asset
          - task: AzureCLI@2
            displayName: 'Register data asset'
            inputs:
              azureSubscription: $(ado_service_connection_aml_ws)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Registering data asset 'taxi-data'..."
                az ml data create --file train/data.yml --resource-group "$(resource_group)" --workspace-name "$(aml_workspace)"
              workingDirectory: 'ml-pipelines/cli'


          - task: AzureCLI@2
            displayName: 'Run training pipeline'
            inputs:
              azureSubscription: $(ado_service_connection_aml_ws)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Running Training pipeline"
                az ml job create --file train/pipeline.yml --resource-group "$(resource_group)" --workspace-name "$(aml_workspace)"
                    
              workingDirectory: 'ml-pipelines/cli'   